using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GameModel
{
    [RealtimeProperty(1, true, true)]
    private int _player1;
    [RealtimeProperty(2, true, true)]
    private int _player2;
}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class GameModel : IModel {
    // Properties
    public int player1 {
        get { return _cache.LookForValueInCache(_player1, entry => entry.player1Set, entry => entry.player1); }
        set { if (value == player1) return; _cache.UpdateLocalCache(entry => { entry.player1Set = true; entry.player1 = value; return entry; }); FirePlayer1DidChange(value); }
    }
    public int player2 {
        get { return _cache.LookForValueInCache(_player2, entry => entry.player2Set, entry => entry.player2); }
        set { if (value == player2) return; _cache.UpdateLocalCache(entry => { entry.player2Set = true; entry.player2 = value; return entry; }); FirePlayer2DidChange(value); }
    }
    
    // Events
    public delegate void Player1DidChange(GameModel model, int value);
    public event         Player1DidChange player1DidChange;
    public delegate void Player2DidChange(GameModel model, int value);
    public event         Player2DidChange player2DidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool player1Set;
        public int  player1;
        public bool player2Set;
        public int  player2;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public GameModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FirePlayer1DidChange(int value) {
        try {
            if (player1DidChange != null)
                player1DidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FirePlayer2DidChange(int value) {
        try {
            if (player2DidChange != null)
                player2DidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Player1 = 1,
        Player2 = 2,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _player1 = player1;
            _player2 = player2;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Player1, (uint)_player1);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Player2, (uint)_player2);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.player1Set)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.Player1, (uint)entry.player1);
                if (entry.player2Set)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.Player2, (uint)entry.player2);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteVarint32((uint)PropertyID.Player1, (uint)_player1);
            stream.WriteVarint32((uint)PropertyID.Player2, (uint)_player2);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.player1Set || entry.player2Set)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.player1Set)
                    stream.WriteVarint32((uint)PropertyID.Player1, (uint)entry.player1);
                if (entry.player2Set)
                    stream.WriteVarint32((uint)PropertyID.Player2, (uint)entry.player2);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool player1ExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.player1Set);
        bool player2ExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.player2Set);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Player1: {
                    int previousValue = _player1;
                    
                    _player1 = (int)stream.ReadVarint32();
                    
                    if (!player1ExistsInChangeCache && _player1 != previousValue)
                        FirePlayer1DidChange(_player1);
                    break;
                }
                case (uint)PropertyID.Player2: {
                    int previousValue = _player2;
                    
                    _player2 = (int)stream.ReadVarint32();
                    
                    if (!player2ExistsInChangeCache && _player2 != previousValue)
                        FirePlayer2DidChange(_player2);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
